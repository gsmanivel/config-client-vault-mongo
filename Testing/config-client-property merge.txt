
----------------------------------------------------------------------
Vault:

new-app/dev:
{
  "db-pw": "vault-new-app-db-pw-dev",
  "db-uname": "vault-new-app-db-name-dev"
}

new-app/prod:
{
  "db-pw": "vault-new-app-db-pw-prod",
  "db-uname": "vault-new-app-db-name-prod"
}
----------------------------------------------------------------------
mongo:

dev:

{
   "_id":{
      "$oid":"62717eabc6e6ef12e87b8ad6"
   },
   "name":"new-app",
   "label":"master",
   "profile":"dev",
   "source":{
      "db-host":"mongo-new-app-db-host-url-dev",
      "db-threadPool":10
   }
}


prod:
{
   "_id":{
      "$oid":"62717edbc6e6ef12e87b8ad8"
   },
   "name":"new-app",
   "label":"master",
   "profile":"prod",
   "source":{
      "db-host":"mongo-new-app-db-host-url-prod"
   }
}
----------------------------------------------------------------------

config client:

application.properties:

spring.application.name=new-app
spring.devtools.add-properties=true
server.port=8081 

spring.cloud.config.profile=dev,prod
spring.cloud.config.label= master
spring.config.import=optional:configserver:http://localhost:8082
management.endpoints.web.exposure.include=*

---------------------------------------------------------------------------------------
config client:

pojo class:
package configclient.vaultmongo.model;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;

@Configuration
public class AppProperties {

    @Value("${db-uname}")
    private String userName;

    @Value("${db-pw}")
    private String password;

    @Value("${db-host}")
    private String url;

    @Value("${db-threadPool}")
    private int treadPool;

    public AppProperties() {
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public int getTreadPool() {
        return treadPool;
    }

    public void setTreadPool(int treadPool) {
        this.treadPool = treadPool;
    }

    @Override
    public String toString() {
        return "AppProperties{" +
                "userName='" + userName + '\'' +
                ", password='" + password + '\'' +
                ", url='" + url + '\'' +
                ", treadPool=" + treadPool +
                '}';
    }
}

---------------------------------------------------------------------------------------
Config client:

Controller Class:
package configclient.vaultmongo.controller;

import configclient.vaultmongo.model.AppProperties;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HelloConfigClient {

    @Autowired
    AppProperties properties;

    @GetMapping
    public String sayHello() {
        return "Hello Client";
    }

    @GetMapping("/props")
    public String getProps() {
        return properties.toString();
    }
}
---------------------------------------------------------------------------------------
Testing config server - using postman

URL: http://localhost:8082/new-app/dev,prod/master

Response:

{
   "name":"new-app",
   "profiles":[
      "dev,prod"
   ],
   "label":"master",
   "version":null,
   "state":null,
   "propertySources":[
      {
         "name":"vault:new-app/prod",
         "source":{
            "db-pw":"vault-new-app-db-pw-prod",
            "db-uname":"vault-new-app-db-name-prod"
         }
      },
      {
         "name":"vault:new-app/dev",
         "source":{
            "db-pw":"vault-new-app-db-pw-dev",
            "db-uname":"vault-new-app-db-name-dev"
         }
      },
      {
         "name":"mongodb:new-app/prod",
         "source":{
            "db-host":"mongo-new-app-db-host-url-prod"
         }
      },
      {
         "name":"mongodb:new-app/dev",
         "source":{
            "db-host":"mongo-new-app-db-host-url-dev",
            "db-threadPool":10
         }
      }
   ]
}
---------------------------------------------------------------------------------------
Testing config client using postman:

URL: http://localhost:8081/props


AppProperties

{
	userName='vault-new-app-db-name-prod', 
	password='vault-new-app-db-pw-prod',
	url='mongo-new-app-db-host-url-prod', 
	treadPool=10
	
}

---------------------------------------------------------------------------------------


06 - May:

When where is no secret in the path: manman/uat
If we use path method to create secrets, getting error message as 

Postman:
 "status": 500,
 "error": "Internal Server Error",

Application:
org.springframework.vault.core.SecretNotFoundException: No data found at secret/data/manman/uat; patch only works on existing data

--------------------------------------------------------------------------------------------------------------------------------------------------------

2. Have some secret value in the vault as mentioned below

Path=manman/uat
Secret Value: 

{
  "db_name": "users",
  "password": "passw0rd"
}

Add third value newly to secret using http patch method:

http://localhost:8088/secret?strPath=manman/uat
{
  "url": "sample url"
}

then response:
{
  "db_name": "users",
  "password": "passw0rd",
  "url": "sample url"
}
--------------------------------------------------------------------------------------------------------------------------------------------------------
